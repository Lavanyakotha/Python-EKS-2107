pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        ECR_REPO = '076194731919.dkr.ecr.us-east-1.amazonaws.com/flask-app'
        IMAGE_TAG = "latest"
        ECS_CLUSTER = 'flask-app-cluster'          // Name of your ECS Cluster
        ECS_SERVICE = 'flask-app-service'          // Name of your ECS Service
        ECS_TASK_DEFINITION = 'flask-app-task'     // ECS Task Definition
    }
    
    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/Lavanyakotha/Python-EKS-2107.git',
                     credentialsId: 'github-credentials',
                     branch: 'main'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image and tag it as "flask-app"
                    sh 'docker build -t flask-app ./app'
                }
            }
        }

        stage('Push to ECR') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'aws-credentials', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh '''
                        set -e
                        # Configure AWS CLI
                        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                        aws configure set default.region $AWS_REGION
        
                        # Authenticate Docker to ECR
                        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO
        
                        # Tag and push Docker image to ECR
                        docker tag flask-app:latest $ECR_REPO:$IMAGE_TAG
                        docker push $ECR_REPO:$IMAGE_TAG
                    '''
                }
            }
        }

        stage('Deploy to ECS') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'aws-credentials', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh '''
                        set -e
                        # Configure AWS CLI for ECS
                        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                        aws configure set default.region $AWS_REGION
                        
                        # Register new task definition with the latest image from ECR
                        aws ecs register-task-definition \
                            --family $ECS_TASK_DEFINITION \
                            --container-definitions "[{
                                \"name\": \"flask-app-container\",
                                \"image\": \"$ECR_REPO:$IMAGE_TAG\",
                                \"essential\": true,
                                \"memory\": 512,
                                \"cpu\": 256,
                                \"portMappings\": [{
                                    \"containerPort\": 5000,
                                    \"hostPort\": 5000,
                                    \"protocol\": \"tcp\"
                                }]
                            }]"
                        
                        # Update ECS Service to use the new Task Definition
                        aws ecs update-service \
                            --cluster $ECS_CLUSTER \
                            --service $ECS_SERVICE \
                            --task-definition $ECS_TASK_DEFINITION
                    '''
                }
            }
        }
    }
}
